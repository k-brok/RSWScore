@inject IAssociationRepository AssociationRepository

@if (ErrorMessages.Any()){
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Vertical">
            @foreach (string message in ErrorMessages)
            {
                <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter">
                    @message
                </RadzenAlert>
            }
        </RadzenStack>
    </RadzenCard>
}
else{
    <RadzenDataGrid @ref="AssociationGridRef" TItem="Association" Data="Associations">
        <Columns>
            <RadzenDataGridColumn Title="Naam" Property="@nameof(Association.Name)">
                <EditTemplate Context="association">
                    <RadzenTextBox @bind-Value="association.Name" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Afkorting" Property="@nameof(Association.Abbreviation)">
                <EditTemplate Context="association">
                    <RadzenTextBox @bind-Value="association.Abbreviation" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Context="association" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="association">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => EditAssociation(association))" />
                </Template>
                <EditTemplate Context="association">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveAssociation(association))" aria-label="Save" />
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEditAssociation(association))" aria-label="Cancel" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteAssociation(association))" aria-label="Delete" />
                </EditTemplate>
                <HeaderTemplate>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Click="@(() => AddAssociation())" />
                </HeaderTemplate>
            </RadzenDataGridColumn>
        </Columns>
        <Template Context="association">
            @if (association.Groups.Any())
            {
                <GroupGrid association="association" />
            }
        </Template>
    </RadzenDataGrid>
}

@code {
    private List<Association> Associations { get; set; }
    private RadzenDataGrid<Association> AssociationGridRef { get; set; }

    private List<string> ErrorMessages { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        Associations = await AssociationRepository.GetAllAsync();
        await base.OnInitializedAsync();
    }
    private async Task EditAssociation(Association association){
        await AssociationGridRef.EditRow(association);
    }
    private async Task SaveAssociation(Association association)
    {
        await AssociationRepository.Save(association);
        await AssociationGridRef.UpdateRow(association);
    }
    private async Task CancelEditAssociation(Association association)
    {
        await AssociationRepository.RevertEdits(association);
        AssociationGridRef.CancelEditRow(association);
    }
    private async Task DeleteAssociation(Association association)
    {
        await AssociationRepository.Delete(association);
        await AssociationGridRef.Reload();
    }
    private async Task AddAssociation()
    {
        Association NewAssociation = new Association();
        await AssociationGridRef.InsertRow(NewAssociation);
    }
}
