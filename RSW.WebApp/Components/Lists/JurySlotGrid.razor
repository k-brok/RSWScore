@inject TimeZoneService TimeZoneService
@inject IJurySlotRepository JurySlotRepository
@inject ICategoryRepository CategoryRepository
@inject IEditionRepository EditionRepository

@if (ErrorMessages.Any())
{
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Vertical">
            @foreach (string message in ErrorMessages)
            {
                <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter">
                    @message
                </RadzenAlert>
            }
        </RadzenStack>
    </RadzenCard>
}
else
{
    <RadzenDataGrid @ref="JurySlotGridRef" TItem="JurySlot" Data="JurySlots">
        <Columns>
            <RadzenDataGridColumn Title="Code" Property="@nameof(JurySlot.Code)" />
            <RadzenDataGridColumn Title="Editie" Width="100px">
                <Template Context="slot">
                    @slot.Edition.Year
                </Template>
                <EditTemplate Context="slot">
                    <RadzenDropDown Data="Editions" @bind-Value=slot.Edition TextProperty="Year"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Subkamp" Width="150px">
                <Template Context="slot">
                    @slot.SubGroup.Color
                </Template>
                <EditTemplate Context="slot">
                    @if(slot.Edition != null){
                        <RadzenDropDown Data="slot.Edition.SubGroups" @bind-Value=slot.SubGroup TextProperty="Color" />
                    }
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Categorie" Width="200px">
                <Template Context="slot">
                    @slot.Category.Name
                </Template>
                <EditTemplate Context="slot">
                    <RadzenDropDown Data="Categories" @bind-Value=slot.Category TextProperty="Name" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Start" Property="@nameof(JurySlot.OpeningTime)" Width="200px">
                <EditTemplate Context="slot">
                    <RadzenDatePicker TValue="DateTime"
                    ShowTime="true"
                    DateFormat="@DateTimeformat"
                    Value="@(TimeZoneService.ConvertUtcToLocal(slot.OpeningTime))"
                    Change="@(async (args) => slot.OpeningTime = TimeZoneService.ConvertLocalToUtc(args.Value))" />
                </EditTemplate>
                <Template Context="slot">
                    @TimeZoneService.ConvertUtcToLocal(slot.OpeningTime).ToString(SiteSettings.GetString("Date format"));
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Einde" Property="@nameof(JurySlot.ClosingTime)" Width="200px">
                <EditTemplate Context="slot">
                    <RadzenDatePicker TValue="DateTime"
                    ShowTime="true"
                    DateFormat="@DateTimeformat"
                    Value="@(TimeZoneService.ConvertUtcToLocal(slot.ClosingTime))"
                    Change="@(async (args) => slot.ClosingTime = TimeZoneService.ConvertLocalToUtc(args.Value))" />
                </EditTemplate>
                <Template Context="slot">
                    @TimeZoneService.ConvertUtcToLocal(slot.ClosingTime).ToString(SiteSettings.GetString("Date format"));
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Context="juryslot" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="juryslot">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => EditJurySlot(juryslot))" />
                </Template>
                <EditTemplate Context="juryslot">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveJurySlot(juryslot))" aria-label="Save" />
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEditJurySlot(juryslot))" aria-label="Cancel" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteJurySlot(juryslot))" aria-label="Delete" />
                </EditTemplate>
                <HeaderTemplate>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Click="@(() => AddJurySlot())" />
                </HeaderTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    [Parameter] public List<JurySlot> JurySlots { get; set; } = null;
    private RadzenDataGrid<JurySlot> JurySlotGridRef { get; set; }
    private List<Category> Categories { get; set; }
    private List<Edition> Editions { get; set; }
    private List<string> ErrorMessages { get; set; } = new List<string>();

    private string DateTimeformat;

    protected override async Task OnInitializedAsync()
    {
        DateTimeformat = $"{@SiteSettings.GetString("Date format")} {@SiteSettings.GetString("Time format")}";
        Editions = await EditionRepository.GetAllAsync();
        Categories = await CategoryRepository.GetAllAsync();
        await base.OnInitializedAsync();
    }

    private async Task EditJurySlot(JurySlot juryslot) => await JurySlotGridRef.EditRow(juryslot);
    private async Task SaveJurySlot(JurySlot juryslot)
    {
        await JurySlotRepository.Save(juryslot);
        await JurySlotGridRef.UpdateRow(juryslot);
    }

    private async Task CancelEditJurySlot(JurySlot juryslot)
    {
        await JurySlotRepository.RevertEdits(juryslot);
        JurySlotGridRef.CancelEditRow(juryslot);
    }

    private async Task DeleteJurySlot(JurySlot juryslot)
    {
        await JurySlotRepository.Delete(juryslot);
        await JurySlotGridRef.Reload();
    }

    private async Task AddJurySlot()
    {
        JurySlot NewJurySlot = new JurySlot { Code = System.Guid.NewGuid().ToString() };
        await JurySlotGridRef.InsertRow(NewJurySlot);
    }
}
