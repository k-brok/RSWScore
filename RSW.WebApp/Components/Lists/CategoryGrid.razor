@inject ICategoryRepository CategoryRepository

@if (ErrorMessages.Any()){
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Vertical">
            @foreach (string message in ErrorMessages)
            {
                <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter">
                    @message
                </RadzenAlert>
            }
        </RadzenStack>
    </RadzenCard>
}
else{
    <RadzenDataGrid @ref="CategoryGridRef" TItem="Category" Data="Categorys">
        <Columns>
            <RadzenDataGridColumn Title="Naam" Property="@nameof(Category.Name)">
                <EditTemplate Context="category">
                    <RadzenTextBox @bind-Value="category.Name" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(Category.Weight)">
                <HeaderTemplate>
                    Gewicht (Totaal: @(Categorys.Sum(C => C.Weight)))
                </HeaderTemplate>
                <EditTemplate Context="category">
                    <RadzenNumeric @bind-Value="category.Weight" />
                </EditTemplate>
            </RadzenDataGridColumn>
            @if (Categorys.SelectMany(C => C.SubCategories).SelectMany(S => S.criterias).Any())
            {
                <RadzenDataGridColumn Title="Max totale score">
                    <Template Context="category">
                        @category.SubCategories.SelectMany(S => S.criterias).Sum(C => C.MaxScore)
                    </Template>
                </RadzenDataGridColumn>
            }
            <RadzenDataGridColumn Context="category" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="category">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => EditCategory(category))" />
                </Template>
                <EditTemplate Context="category">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveCategory(category))" aria-label="Save" />
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEditCategory(category))" aria-label="Cancel" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteCategory(category))" aria-label="Delete" />
                </EditTemplate>
                <HeaderTemplate>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Click="@(() => AddCategory())" />
                </HeaderTemplate>
            </RadzenDataGridColumn>
        </Columns>
        <Template Context="category">
            <SubCategoryGrid category="category" />
        </Template>
    </RadzenDataGrid>
}

@code {
    [Parameter] public List<Category> Categorys { get; set; } = null;

    private RadzenDataGrid<Category> CategoryGridRef { get; set; }

    private List<string> ErrorMessages { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        Categorys = await CategoryRepository.GetAllAsync();
        await base.OnInitializedAsync();
    }
    private async Task EditCategory(Category category){
        await CategoryGridRef.EditRow(category);
    }
    private async Task SaveCategory(Category category)
    {
        await CategoryRepository.Save(category);
        await CategoryGridRef.UpdateRow(category);
    }
    private async Task CancelEditCategory(Category category)
    {
        await CategoryRepository.RevertEdits(category);
        CategoryGridRef.CancelEditRow(category);
    }
    private async Task DeleteCategory(Category category)
    {
        await CategoryRepository.Delete(category);
        await CategoryGridRef.Reload();
    }
    private async Task AddCategory()
    {
        Category NewCategory = new Category();
        await CategoryGridRef.InsertRow(NewCategory);
    }
}
