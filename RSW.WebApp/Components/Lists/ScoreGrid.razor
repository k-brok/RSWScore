@inject IScoreRepository ScoreRepository

@if (ErrorMessages.Any()){
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Vertical">
            @foreach (string message in ErrorMessages)
            {
                <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter">
                    @message
                </RadzenAlert>
            }
        </RadzenStack>
    </RadzenCard>
}
else{
    <RadzenDataGrid @ref="ScoreGridRef" TItem="Score" Data="Scores">
        <Columns>
            <RadzenDataGridColumn Title="punten" Property="@nameof(Score.Value)">
                <EditTemplate Context="score">
                    <RadzenNumeric @bind-Value="score.Value" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Patrouille">
                <Template Context="score">
					@score.Patrol.Name
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Criteria">
                <Template Context="score">
                    @if (string.IsNullOrEmpty(score.Criteria.Name))
                    {
                        @score.Criteria.Id
                    }
                    else
                    {
                        @score.Criteria.Name
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Context="score" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="score">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => EditScore(score))" />
                </Template>
                <EditTemplate Context="score">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveScore(score))" aria-label="Save" />
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEditScore(score))" aria-label="Cancel" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteScore(score))" aria-label="Delete" />
                </EditTemplate>
                <HeaderTemplate>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Click="@(() => AddScore())" />
                </HeaderTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    [Parameter] public List<Score> Scores { get; set; } = null;
    [Parameter] public Patrol patrol { get; set; } = null;

    private RadzenDataGrid<Score> ScoreGridRef { get; set; }

    private DateOnly AgeDate = DateOnly.FromDateTime(DateTime.Now);

    private List<string> ErrorMessages { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        if(Scores == null && patrol == null){
            ErrorMessages.Add("No scores or patrol givven!");
        }
        else if (patrol != null){
            Scores = patrol.Scores;
        }
        await base.OnInitializedAsync();
    }
    private async Task EditScore(Score score){
        await ScoreGridRef.EditRow(score);
    }
    private async Task SaveScore(Score score)
    {
        await ScoreRepository.Save(score);
        await ScoreGridRef.UpdateRow(score);
    }
    private async Task CancelEditScore(Score score)
    {
        await ScoreRepository.RevertEdits(score);
        ScoreGridRef.CancelEditRow(score);
    }
    private async Task DeleteScore(Score score)
    {
        if (patrol != null)
        {
            if (patrol.Scores.Contains(score)){
                patrol.Scores.Remove(score);
            }
        }
        await ScoreRepository.Delete(score);
        await ScoreGridRef.Reload();
    }
    private async Task AddScore()
    {
        Score NewScore = new Score();
        await ScoreGridRef.InsertRow(NewScore);
    }
}
