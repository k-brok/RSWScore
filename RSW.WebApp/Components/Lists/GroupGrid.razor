@inject IGroupRepository GroupRepository

@if (ErrorMessages.Any()){
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Vertical">
            @foreach (string message in ErrorMessages)
            {
                <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter">
                    @message
                </RadzenAlert>
            }
        </RadzenStack>
    </RadzenCard>
}
else{
    <RadzenDataGrid @ref="GroupGridRef" TItem="Entities.Group" Data="Groups">
        <Columns>
            <RadzenDataGridColumn Title="Naam" Property="@nameof(Entities.Group.Name)">
                <EditTemplate Context="group">
                    <RadzenTextBox @bind-Value="group.Name" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Context="group" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="group">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => EditGroup(group))" />
                </Template>
                <EditTemplate Context="group">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveGroup(group))" aria-label="Save" />
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEditGroup(group))" aria-label="Cancel" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteGroup(group))" aria-label="Delete" />
                </EditTemplate>
                <HeaderTemplate>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Click="@(() => AddGroup())" />
                </HeaderTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    [Parameter] public List<Entities.Group> Groups { get; set; } = null;
    [Parameter] public Association association { get; set; } = null;

    private RadzenDataGrid<Entities.Group> GroupGridRef { get; set; }

    private List<string> ErrorMessages { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        if (Groups == null && association == null)
        {
            ErrorMessages.Add("No scouts or patrol givven!");
        }
        else if (association != null)
        {
            Groups = association.Groups.ToList();
        }
        await base.OnInitializedAsync();
    }
    private async Task EditGroup(Entities.Group group)
    {
        await GroupGridRef.EditRow(group);
    }
    private async Task SaveGroup(Entities.Group group)
    {
        await GroupRepository.Save(group);
        await GroupGridRef.UpdateRow(group);
    }
    private async Task CancelEditGroup(Entities.Group group)
    {
        await GroupRepository.RevertEdits(group);
        GroupGridRef.CancelEditRow(group);
    }
    private async Task DeleteGroup(Entities.Group group)
    {
        if (association != null)
        {
            if (association.Groups.Contains(group))
            {
                association.Groups.Remove(group);
            }
        }
        await GroupRepository.Delete(group);
        await GroupGridRef.Reload();
    }
    private async Task AddGroup()
    {
        Entities.Group NewGroup = new Entities.Group();
        await GroupGridRef.InsertRow(NewGroup);
    }
}
